package com.football.backend.services;

import com.football.backend.models.Player;
import com.football.backend.entities.PlayerEntity;
import com.football.backend.repositories.PlayerRepository;
import com.football.backend.mappers.PlayerMapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.EntityNotFoundException; // Or your custom exception
import java.util.UUID;

@Service
public class PlayerService {

    private final PlayerRepository playerRepository;
    private final PlayerMapper playerMapper;

    @Autowired
    public PlayerService(PlayerRepository playerRepository, PlayerMapper playerMapper) {
        this.playerRepository = playerRepository;
        this.playerMapper = playerMapper;
    }

    /**
     * Finds a single player by their ID.
     *
     * @param id The UUID of the player to find.
     * @return The Player domain object.
     * @throws EntityNotFoundException if no player is found with that ID.
     */
    @Transactional(readOnly = true) // Good practice for read-only operations
    public Player getPlayerById(UUID id) {
        // 1. Fetch the entity from the database
        PlayerEntity entity = playerRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Player not found with id: " + id));
        
        // 2. Map the entity to the domain model
        return playerMapper.toDomain(entity);
    }

    /**
     * Adds a new player to the database.
     *
     * @param player The Player domain object to add. 
     * This object should have a null ID.
     * @return The saved Player domain object, now with its database-generated ID.
     */
    @Transactional // This is a write-operation
    public Player addPlayer(Player player) {
        if (player.getId() != null) {
            throw new IllegalArgumentException("New player must have a null ID.");
        }
        
        // 1. Map the domain model to the entity
        // The mapper will create a PlayerEntity with a null ID
        PlayerEntity entityToSave = playerMapper.toEntity(player);

        // 2. Save the entity. JPA will see the null ID and perform an INSERT.
        // The 'savedEntity' will contain the ID generated by the database.
        PlayerEntity savedEntity = playerRepository.save(entityToSave);

        // 3. Map the saved entity (with its new ID) back to a domain model
        return playerMapper.toDomain(savedEntity);
    }
}